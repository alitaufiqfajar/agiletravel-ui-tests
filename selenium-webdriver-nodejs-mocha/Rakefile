require 'rubygems'

load File.join(File.dirname(__FILE__), "buildwise.rake")

BUILDWISE_QUICK_PROJECT_ID = "agiletravel-quick-build-mocha" 
BUILDWISE_FULL_PROJECT_ID = "agiletravel-full-build-mocha"
BUILDWISE_URL = ENV["BUILDWISE_MASTER"] || "http://buildwise.macmini"

FULL_BUILD_MAX_TIME = 60 * 60   # 1 hour
FULL_BUILD_CHECK_INTERVAL = 30  # 1 minute

$test_dir = File.join(File.dirname(__FILE__))

def test_files 
  [
    # "#{$test_dir}/spec/passenger_spec.js",
    "#{$test_dir}/spec/flight_spec.js",
    # "#{$test_dir}/spec/payment_spec.js",
    "#{$test_dir}/spec/login_spec.js",
  ]
end


def excluded_spec_files
  # ["ignore_spec.rb", "bad_test.rb", "selected_scripts_spec.rb"]
  ["spec/ignored_spec.js"]
end

desc "run all tests in this folder"
task "ui_tests:quick"  do
  `cd selenium-webdriver-nodejs-mocha; mocha spec --reporter mocha-junit-reporter`
end

desc "run all tests in this folder"
task "ci:test:quick" do
    reports_dir = File.join(File.dirname(__FILE__),  "reports")
    if File.exists?(reports_dir)
      FileUtils.rm_rf(reports_dir)
    end
    FileUtils.mkdir_p(reports_dir)
    exit_code = 0
    test_files.each do |test_file|
      mocha_file = File.expand_path File.join(reports_dir, File.basename(test_file).gsub(".js", ".xml"))
      cmd = "mocha #{test_file} --reporter mocha-junit-reporter --reporter-options mochaFile=#{mocha_file}"
      puts cmd
      result = system(cmd)
      if exit_code == 0 && !result
        exit_code = -1
      end   
      sleep 0.25
    end
    exit(exit_code)
  
end



## Full Build
#
#  TODO - how to determin useing RSpec or Cucumber
#
desc "Running tests distributedly"
task "ci:ui_tests:full" do
  build_id = buildwise_start_build(:project_name => BUILDWISE_FULL_PROJECT_ID,
                                   :working_dir => File.expand_path(File.dirname(__FILE__)),
                                   :ui_test_dir => ["spec"],
                                   :excluded => excluded_spec_files || [],
                                   :distributed => true,
                                   :test_framework => "Mocha"
  )

  the_build_status = buildwise_build_ui_test_status(build_id)
  start_time = Time.now

  puts "[Rake] Keep checking build |#{build_id} | #{the_build_status}"
  while ((Time.now - start_time ) < FULL_BUILD_MAX_TIME) # test exeuction timeout
    the_build_status = buildwise_build_ui_test_status(build_id)
    puts "[Rake] #{Time.now} Checking build status: |#{the_build_status}|"
    if the_build_status == "OK"
      exit 0
    elsif the_build_status == "Failed"
      exit -1
    else 
      sleep FULL_BUILD_CHECK_INTERVAL  # check the build status every minute
    end
  end
  puts "[Rake] Execution UI tests expired"
  exit -2
end
