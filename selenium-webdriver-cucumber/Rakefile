# You need Ruby (Rake, Cucumber 1.3.3, ci_reporter gems installed)
#   Simplest way on Windows is to install RubyShell (http://testwisely.com/downloads)

require 'rubygems'
require 'cucumber'
require 'cucumber/rake/task'

load File.join(File.dirname(__FILE__), "buildwise.rake")

## Settings: Customize here...
#
BUILDWISE_URL = ENV["BUILDWISE_MASTER"] || "http://buildwise.dev"
BUILDWISE_QUICK_PROJECT_ID = "agiletravel"
BUILDWISE_FULL_PROJECT_ID  = "agiletravel-full-build-cucumber"

FULL_BUILD_MAX_TIME = 60 * 60   # 1 hour
FULL_BUILD_CHECK_INTERVAL = 60  # 1 minute

$test_dir =  File.expand_path(File.dirname(__FILE__))  # change to aboslution path if invoktion is not this directory

# List tests you want to exclude
#
def excluded_feature_files
  ["ignore.feature", "bad_test.feature"]
end

def all_features
  Dir.glob("features/*.feature")
end

def features_for_quick_build
  # list test files to be run in a quick build
  [
    "features/login.feature",
    "features/flight.feature",
    "features/payment.feature"
  ]
end

task "set_work_directory"  do
  FileUtils.chdir(File.dirname(__FILE__));
end

desc "run all tests in this folder"
Cucumber::Rake::Task.new("ui_tests:quick")  do |t|

  Rake::Task['set_work_directory'].invoke
  features_to_be_executed = features_for_quick_build
  features_to_be_executed -= excluded_feature_files
  features_to_be_executed.uniq!
  features_to_be_executed.each do |a_test|
    file_path = File.join(File.dirname(__FILE__), a_test)
    features_to_be_executed.delete(a_test) unless File.exists?(file_path)
  end

  log_dir = File.expand_path(File.join(File.dirname(__FILE__), "log"))
  FileUtils.rm_rf(log_dir) if File.exists?(log_dir)
  FileUtils.mkdir(log_dir)

  puts "[INFO] Tests in order => #{features_to_be_executed.collect {|x| File.basename(x)}.inspect}"
  file_list = features_to_be_executed.join(" ")

  # feel free to add/rmeove formatter, junit is required for CI reporting
  t.cucumber_opts = [
    "--format progress -o log/features.log",
    "--format junit    -o log/",
    "--format html     -o log/features.html",
    # "--format pretty",      # can be quite lengthy
    file_list
  ]

end


desc "run quick tests from BuildWise"
task "ci:ui_tests:quick"  do
  build_id = buildwise_start_build(:project_name => BUILDWISE_QUICK_PROJECT_ID,
  :working_dir => File.expand_path(File.dirname(__FILE__)),
  :ui_test_dir => ["."],
  :excluded => excluded_feature_files
  )
  puts "[Rake] new build id =>|#{build_id}|"
  begin
    Rake::Task["ui_tests:quick"].invoke
    # puts "[Rake] Invoke Finish"
  ensure
    puts "Finished: Notify build status"
    sleep 2 # wait a couple of seconds to finish writing last test results xml file out
    puts "[Rake] finish the build"
    buildwise_finish_build(build_id)
  end
end


## Full Build
#
#  TODO - how to determin useing RSpec or Cucumber
#
desc "Running tests distributedly"
task "ci:ui_tests:full"  do
  build_id = buildwise_start_build(:project_name => BUILDWISE_FULL_PROJECT_ID,
  :working_dir => File.expand_path(File.dirname(__FILE__)),
  :ui_test_dir => ["features"],
  :excluded => excluded_feature_files || [],
  :distributed => true
  )

  the_build_status = buildwise_build_ui_test_status(build_id)
  start_time = Time.now

  puts "[Rake] Keep checking build |#{build_id} | #{the_build_status}"
  while ((Time.now - start_time) < FULL_BUILD_MAX_TIME) # test exeuction timeout
    the_build_status = buildwise_build_ui_test_status(build_id)
    puts "[Rake] #{Time.now} Checking build status: |#{the_build_status}|"
    if the_build_status == "OK"
      exit 0
    elsif the_build_status == "Failed"
      exit -1
    else
      sleep FULL_BUILD_CHECK_INTERVAL  # check the build status every minute
    end
  end
  puts "[Rake] Execution UI tests expired"
  exit -2
end
